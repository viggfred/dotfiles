(custom-set-variables
  ;; custom-set-variables was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 '(case-fold-search t)
 '(current-language-environment "English")
 '(global-font-lock-mode t nil (font-lock))
 '(show-paren-mode t nil (paren))
 '(text-mode-hook (quote (turn-on-auto-fill text-mode-hook-identify)))
 '(transient-mark-mode t))
(custom-set-faces
  ;; custom-set-faces was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 )

;; Add color to a shell running in emacs 'M-x shell'
(autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(tool-bar-mode 0)
;; pymacs and rope
(require 'pymacs)
(pymacs-load "ropemacs" "rope-")
(setq ropemacs-enable-autoimport t)

;; enable color theme
;;(require 'color-theme)
;;(color-theme-initialize)
;;(color-theme-dark-laptop)

;; turns on autofill on emacs;; set tab width to 4 by default
(setq-default tab-width 4)

;; spaces instead of tabs by default...
(setq-default indent-tabs-mode nil)
(setq-default auto-fill-function 'do-auto-fill)

;; Make lines wrap automatically in text mode.
(add-hook 'text-mode-hook
'(lambda () (auto-fill-mode 1)))

;; Key binding to go to line by just doing alt-x g, to go to a line somewhere in your code
(global-set-key "\M-g" 'goto-line)

;; Key binding for comment / uncommenting regions
(global-set-key "\C-c c" 'comment-dwim)

(global-set-key [f7] 'compile)
(global-set-key [f4] 'goto-next-locus)
(global-set-key [f8] 'rope-goto-definition)

;;If at beginning of a line, don't make me C-k twice.
(setq kill-whole-line t)

;; HACK HACK disable vc hooks (for sshfs editing)
(setq vc-handled-backends ())
;;(eval-after-load "vc" (remove-hook 'find-file-hooks 'vc-find-file-hook))

;; Basic unit of spaces for each indentation level. You can change
;; the 2 if you need larger or smaller indents.
(add-hook 'c++-mode-hook '(lambda ()
(setq c-basic-offset 4)))
(add-hook 'c-mode-hook '(lambda ()
(setq c-basic-offset 4)))
(add-hook 'python-mode-hook '(lambda ()
(setq c-basic-offset 4)))

;; set default braces style
(add-hook 'c++-mode-hook '(lambda ()
(setq c-default-style "k&r")))
(add-hook 'c-mode-hook '(lambda ()
(setq c-default-style "k&r")))

(add-to-list 'auto-mode-alist '("\\.tt[rs]\\'" . tng-mode))

;; Use only spaces for indentation (default is tabs mixed with spaces)
;; so that our files will always look the same regardless of the viewing
;; software.
(add-hook 'c++-mode-hook '(lambda ()
(setq indent-tabs-mode nil)))
(add-hook 'c-mode-hook '(lambda ()
(setq indent-tabs-mode nil)))

;; show trailing whitespace
(setq show-trailing-whitespace t)

;; set standard indent
(setq-default standard-indent 4)

;; proper curly braces
(setq c-offsets-alist '((arglist-intro . +) (substatement-open . 0) (inline-open . 0) (innamespace . 0) (inextern-lang . 0)))


;; Make Emacs automatically hit return for you after left curly braces,
;; right curly braces, and semi-colons.
(setq c-auto-newline 1)

;; Make Emacs use "newline-and-indent" when you hit the Enter key so
;; that you don't need to keep using TAB to align yourself when coding.
;; This is akin to setting autoindent in vi.
(global-set-key "\C-m" 'newline-and-indent)

;; Turn on auto-fill-mode (line wrapping like in a word processor).
;; This is VERY nice for typing end-of-line comments, since Emacs will
;; not only position you on the next line when you go beyond the
;; fill-column (set below), but it will line you up with the first
;; slash on the previous line and then put two slashes and a space for
;; you! (In C mode it's a "/* */" pair with the cursor positioned
;; correctly in the middle.)
(add-hook 'c++-mode-hook 'turn-on-auto-fill)
(add-hook 'c-mode-hook 'turn-on-auto-fill)

;; Set the default comment column for end-of-line comments to 40.
;; When you want to comment the end of a line of code, put the
;; cursor anywhere on that line and hold down Alt and press the
;; semi-colon key (';'). Emacs automatically goes to column 40, puts
;; in the appropriate comment characters, and then lets you type your
;; comment. With the auto-fill feature turned on, this also allows you
;; to have your comment extend beyond the end of the line and still be
;; lined up and enclosed with comment characters for you on the next
;; line.
(add-hook 'c++-mode-hook '(lambda ()
(setq comment-column 40)))
(add-hook 'c-mode-hook '(lambda ()
(setq comment-column 40)))

;; Turn on global font-locking
(global-font-lock-mode t)

;; Turn on paren matching
(show-paren-mode t)

;; Displays the name of the file being edited in the title bar.
(setq frame-title-format "%b")

;; Makes the screen scroll only one line when the cursor moves past the edge.
(setq scroll-step 1)

;; Split the default window in two
(split-window-horizontally)

;; remove toolbar
;;(tool-bar-mode -1)

;; turn off the annoying alarm bell
(setq ring-bell-function 'ignore)

;; Make scripts executable on Save (saves having to do the chmod every time)
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)

;; Set default font
;;(set-default-font "-misc-dejavu sans mono-medium-r-normal--0-0-0-0-m-0-iso8859-15")

;; remove GUI shit
;;(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
;;(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
;;(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))

;; turn off the 3d formatting of the mode-line.
(set-face-attribute 'mode-line nil :box nil)

;; no splash screen
(setq inhibit-startup-message t)

;; replace yes/no with simpler
(fset 'yes-or-no-p 'y-or-n-p)

;; alias for del trailing
(defalias 'dtw 'delete-trailing-whitespace)

;;;:::::::::;;;
;; File modes
;;;;;;;;;;;;;;;
; tidl files in C-mode
(setq auto-mode-alist (append '(("\\.tidl$" . c-mode)) auto-mode-alist ))

;;; Misc macros
(global-set-key [f3] 'dabbrev-expand)
(global-set-key [f4] 'dabbrev-completion)

;;;;;;;;;;;;;;;;;;
;; FILL IN MACROS
;;;;;;;;;;;;;;;;;;;
(defun doxygen-comment-function ()
  "Add a doxygen comment to a function"
  (interactive)
  (let ((brief "")
        desc
        param-list
        return-desc
        param-name
        ws)
    (while (string= brief "")
      (setq brief (read-from-minibuffer "Brief description (mandatory): "))
      )
    (setq desc (read-from-minibuffer "Full description (optional): "))
    (while (not (string= param-name ""))
      (setq param-name (read-from-minibuffer "Add parameter name (<enter> when finished): "))
      (if (not (string= param-name ""))
          (setq param-list
                (append
                 param-list
                 (list
                  (list
                   param-name
                   (read-from-minibuffer "Parameter descripton: ")
                   )
                  )
                 )
                )
        )
      )
    (setq return-desc (read-from-minibuffer "Return value descripton (optional): "))
    (setq ws (make-string (current-column) ? ))
    (insert "/**\n")
    (let ((begin (window-point)))
      (insert (format "%s * \\brief %s\n" ws brief))
      (fill-region begin (window-point))
      (insert (format "%s *\n" ws))
      (when (not (string= desc ""))
        (setq begin (window-point))
        (insert (format "%s * %s\n" ws desc))
        (fill-region begin (window-point))
        (insert (format "%s *\n" ws))
        )
      (dolist (elm param-list)
        (let ((name (pop elm))
              (desc (pop elm)))
          (insert (format "%s * \\param  %-8s %s\n" ws name desc))
          )
        )
      (when (not (string= return-desc ""))
        (insert (format "%s * \\return %s\n" ws return-desc))
        )
      (insert (format "%s */" ws))
      (if (> (line-end-position) (window-point))
          (insert "\n")
        )
      )
    )
  )

(load "server")
(unless (server-running-p) (server-start))
